const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const QRCode = require('qrcode');
const path = require('path');
const session = require('express-session');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// ‚úÖ NOVO: Configura√ß√£o de sess√£o
app.use(session({
    secret: 'barbearia-arretado-secret-key-2025',
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: false, // Para desenvolvimento local
        maxAge: 24 * 60 * 60 * 1000 // 24 horas
    }
}));

// Middleware
app.use(express.static('public'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Vari√°veis globais
global.currentQR = null;
global.botStatus = 'Inicializando...';
global.io = io;
global.botClient = null;
global.botPaused = false;

// ‚úÖ NOVO: PIN de acesso (altere para o PIN desejado)
const ACCESS_PIN = '1315'; // Altere para seu PIN

// ‚úÖ NOVO: Middleware de autentica√ß√£o
function requireAuth(req, res, next) {
    if (req.session.authenticated) {
        return next();
    }
    
    // Se for uma requisi√ß√£o AJAX, retornar erro JSON
    if (req.xhr || req.headers.accept.indexOf('json') > -1) {
        return res.status(401).json({ error: 'N√£o autorizado' });
    }
    
    // Redirecionar para p√°gina de login
    res.redirect('/login');
}

// Configura√ß√µes globais
global.botConfig = {
    welcomeMessage: "Bem-vindo(a) √† *Barbearia Arretado*! üíà",
    address: "Av. Paulistana 2015, Natal, Rio Grande do Norte 59108120",
    operatingHours: "Seg a Sex: 09h as 19h\nSab: 09h as 16h",
    schedulingLink: "https://agendeonline.salonsoft.com.br/arretadobarbearia",
    controlNumber: "",
    services: [
        { id: 1, name: "Barba", time: "20min", price: "a partir de R$ 20,00" },
        { id: 2, name: "Barba na cera (designer)", time: "30min", price: "a partir de R$ 35,00" },
        { id: 3, name: "Barba na cera (remo√ß√£o total)", time: "40min", price: "a partir de R$ 50,00" },
        { id: 4, name: "Corte de cabelo", time: "40min", price: "a partir de R$ 28,00" },
        { id: 5, name: "Corte + barba + sobrancelha", time: "1h:10min", price: "a partir de R$ 55,00" },
        { id: 6, name: "Corte + barba", time: "1h:00min", price: "a partir de R$ 45,00" },
        { id: 7, name: "Depila√ß√£o nasal", time: "15min", price: "a partir de R$ 15,00" },
        { id: 8, name: "Hidrata√ß√£o + lavar", time: "10min", price: "a partir de R$ 15,00" },
        { id: 9, name: "Luzes / reflexo", time: "1h:00min", price: "a partir de R$ 45,00" },
        { id: 10, name: "Pigmenta√ß√£o cabelo ou barba", time: "15min", price: "a partir de R$ 18,00" },
        { id: 11, name: "Platinado (nevou)", time: "1h:00min", price: "a partir de R$ 90,00" },
        { id: 12, name: "Relaxamento", time: "20min", price: "a partir de R$ 35,00" },
        { id: 13, name: "Sobrancelhas", time: "10min", price: "a partir de R$ 10,00" },
        { id: 14, name: "Sobrancelhas na cera", time: "25min", price: "a partir de R$ 15,00" }
    ]
};

let lastQRRequest = 0;
const QR_LOG_INTERVAL = 30000;

// ‚úÖ NOVAS ROTAS: Login
app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

app.post('/login', (req, res) => {
    const { pin } = req.body;
    
    console.log('üîê Tentativa de login com PIN:', pin);
    
    if (pin === ACCESS_PIN) {
        req.session.authenticated = true;
        console.log('‚úÖ Login autorizado');
        res.json({ success: true, message: 'Login autorizado' });
    } else {
        console.log('‚ùå PIN incorreto');
        res.status(401).json({ success: false, message: 'PIN incorreto' });
    }
});

app.post('/logout', (req, res) => {
    req.session.destroy();
    console.log('üö™ Logout realizado');
    res.json({ success: true, message: 'Logout realizado' });
});

// ‚úÖ ROTAS PROTEGIDAS: Aplicar autentica√ß√£o
app.get('/', requireAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/qr', requireAuth, async (req, res) => {
    const now = Date.now();
    if (now - lastQRRequest > QR_LOG_INTERVAL) {
        console.log('üì± Solicita√ß√£o de QR Code recebida');
        lastQRRequest = now;
    }
    
    if (global.currentQR) {
        try {
            const qrImage = await QRCode.toDataURL(global.currentQR);
            res.json({ 
                qr: qrImage, 
                status: global.botStatus,
                hasQR: true 
            });
        } catch (error) {
            console.error('Erro ao gerar QR Code:', error);
            res.json({ 
                error: 'Erro ao gerar QR Code', 
                status: global.botStatus,
                hasQR: false 
            });
        }
    } else {
        res.json({ 
            message: 'QR Code n√£o dispon√≠vel', 
            status: global.botStatus,
            hasQR: false 
        });
    }
});

app.get('/config', requireAuth, (req, res) => {
    res.json(global.botConfig);
});

app.post('/config', requireAuth, (req, res) => {
    console.log('üìù Atualizando configura√ß√µes:', req.body);
    
    global.botConfig = { ...global.botConfig, ...req.body };
    
    console.log('‚úÖ Configura√ß√µes atualizadas globalmente');
    console.log('   N√∫mero de controle:', global.botConfig.controlNumber);
    
    res.json({ success: true, message: 'Configura√ß√µes atualizadas!' });
});

app.get('/services', requireAuth, (req, res) => {
    console.log('üìã Listando servi√ßos - Total:', global.botConfig.services.length);
    res.json({ services: global.botConfig.services });
});

app.post('/services', requireAuth, (req, res) => {
    const { name, time, price } = req.body;
    console.log('‚ûï Adicionando servi√ßo:', { name, time, price });
    
    if (!name || !time || !price) {
        return res.status(400).json({ 
            success: false, 
            message: 'Nome, tempo e pre√ßo s√£o obrigat√≥rios' 
        });
    }
    
    const newId = Math.max(...global.botConfig.services.map(s => s.id), 0) + 1;
    const newService = { id: newId, name, time, price };
    
    global.botConfig.services.push(newService);
    console.log('‚úÖ Servi√ßo adicionado com ID:', newId);
    
    res.json({ 
        success: true, 
        message: 'Servi√ßo adicionado com sucesso!', 
        service: newService 
    });
});

app.put('/services/:id', requireAuth, (req, res) => {
    const { id } = req.params;
    const { name, time, price } = req.body;
    console.log('‚úèÔ∏è Editando servi√ßo ID:', id, 'Dados:', { name, time, price });
    
    const serviceIndex = global.botConfig.services.findIndex(s => s.id == id);
    
    if (serviceIndex === -1) {
        console.log('‚ùå Servi√ßo n√£o encontrado:', id);
        return res.status(404).json({ 
            success: false, 
            message: 'Servi√ßo n√£o encontrado' 
        });
    }
    
    global.botConfig.services[serviceIndex] = { 
        id: parseInt(id), 
        name, 
        time, 
        price 
    };
    
    console.log('‚úÖ Servi√ßo atualizado:', global.botConfig.services[serviceIndex]);
    
    res.json({ 
        success: true, 
        message: 'Servi√ßo atualizado com sucesso!', 
        service: global.botConfig.services[serviceIndex] 
    });
});

app.delete('/services/:id', requireAuth, (req, res) => {
    const { id } = req.params;
    console.log('üóëÔ∏è Removendo servi√ßo ID:', id);
    
    const serviceIndex = global.botConfig.services.findIndex(s => s.id == id);
    
    if (serviceIndex === -1) {
        console.log('‚ùå Servi√ßo n√£o encontrado para remo√ß√£o:', id);
        return res.status(404).json({ 
            success: false, 
            message: 'Servi√ßo n√£o encontrado' 
        });
    }
    
    const deletedService = global.botConfig.services.splice(serviceIndex, 1)[0];
    console.log('‚úÖ Servi√ßo removido:', deletedService);
    
    res.json({ 
        success: true, 
        message: 'Servi√ßo removido com sucesso!', 
        service: deletedService 
    });
});

app.post('/bot-control', requireAuth, async (req, res) => {
    const { action } = req.body;
    console.log('üéÆ Comando de controle recebido:', action);
    
    try {
        if (action === 'restart') {
            console.log('üîÑ Iniciando processo de rein√≠cio do bot...');
            
            if (global.botClient) {
                console.log('üîÑ Destruindo cliente atual...');
                try {
                    await global.botClient.destroy();
                    console.log('‚úÖ Cliente anterior destru√≠do com sucesso');
                } catch (error) {
                    console.log('‚ö†Ô∏è Erro ao destruir cliente:', error.message);
                }
                global.botClient = null;
            }
            
            global.currentQR = null;
            global.botStatus = 'Reiniciando...';
            global.botPaused = false;
            
            if (global.io) {
                global.io.emit('status-update', { status: 'Reiniciando...' });
            }
            
            setTimeout(() => {
                console.log('üöÄ Reiniciando bot...');
                try {
                    delete require.cache[require.resolve('./robo')];
                    require('./robo');
                    console.log('‚úÖ Bot reiniciado com sucesso');
                } catch (error) {
                    console.error('‚ùå Erro ao reiniciar bot:', error);
                    global.botStatus = 'Erro no rein√≠cio';
                    if (global.io) {
                        global.io.emit('status-update', { status: 'Erro no rein√≠cio' });
                    }
                }
            }, 3000);
            
            res.json({ success: true, message: 'Bot reiniciado com sucesso!' });
            
        } else if (action === 'pause') {
            console.log('‚è∏Ô∏è Pausando bot...');
            
            global.botPaused = true;
            global.botStatus = 'Pausado manualmente';
            
            if (global.io) {
                global.io.emit('status-update', { status: 'Pausado manualmente' });
            }
            
            res.json({ success: true, message: 'Bot pausado com sucesso!' });
            
        } else if (action === 'resume') {
            console.log('‚ñ∂Ô∏è Reativando bot...');
            
            global.botPaused = false;
            global.botStatus = 'Ativo';
            
            if (global.io) {
                global.io.emit('status-update', { status: 'Ativo' });
            }
            
            res.json({ success: true, message: 'Bot reativado com sucesso!' });
            
        } else {
            console.log('‚ùå A√ß√£o inv√°lida recebida:', action);
            res.status(400).json({ success: false, message: 'A√ß√£o inv√°lida' });
        }
    } catch (error) {
        console.error('‚ùå Erro no controle do bot:', error);
        res.status(500).json({ success: false, message: 'Erro interno do servidor' });
    }
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        bot: global.botStatus,
        hasQR: !!global.currentQR,
        timestamp: new Date().toISOString()
    });
});

// ‚úÖ NOVO: Socket.IO com autentica√ß√£o
io.use((socket, next) => {
    // Verificar se a sess√£o est√° autenticada
    const sessionId = socket.handshake.headers.cookie;
    if (sessionId) {
        // Em produ√ß√£o, voc√™ pode verificar a sess√£o aqui
        next();
    } else {
        next(new Error('N√£o autorizado'));
    }
});

io.on('connection', (socket) => {
    console.log('üåê Cliente autenticado conectado √† interface web');
    
    socket.emit('status-update', { 
        status: global.botStatus,
        hasQR: !!global.currentQR
    });
    
    if (global.currentQR) {
        QRCode.toDataURL(global.currentQR).then(qrImage => {
            socket.emit('qr-update', { 
                qr: qrImage, 
                status: global.botStatus 
            });
        }).catch(err => {
            console.error('Erro ao enviar QR via socket:', err);
        });
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üåê Interface web rodando em http://localhost:${PORT}`);
    console.log(`üîê PIN de acesso: ${ACCESS_PIN}`);
});

// Iniciar bot
setTimeout(() => {
    console.log('ü§ñ Iniciando bot WhatsApp...');
    require('./robo');
}, 2000);
